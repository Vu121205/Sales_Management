package view;

import dao.DBConnection;
import java.sql.Connection;
import java.sql.Statement;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;



/**
 *
 * @author ADMIN
 */
public class OrderUser extends javax.swing.JFrame {
    private DefaultTableModel modelProduct;
    private DefaultTableModel modelCart;
    /**
     * Creates new form UserForm
     */
    public OrderUser(){
        initComponents();
        
         // khởi tạo model từ table (sau initComponents)
        modelProduct = (DefaultTableModel) tblProduct.getModel();
        modelCart = (DefaultTableModel) tblCart.getModel();

        // Xóa các hàng mặc định do NetBeans tạo để khi addRow sẽ bắt đầu từ dòng 0
        modelCart.setRowCount(0);

        loadCategories();    // đổ combobox
        loadAllProducts();   // mặc định hiển thị tất cả sản phẩm
        txtQuantity.setText("1"); // số lượng mặc định
        lblTotal.setText("Tổng tiền: 0 VND");
        
        updateTotal();
                
    }
    
    private void loadCategories() {
        cbCategory.removeAllItems();
        // thêm lựa chọn xem tất cả
        cbCategory.addItem("Tất cả");

        String sql = "SELECT id, name FROM categories";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                String id = rs.getString("id");
                String name = rs.getString("name");
                cbCategory.addItem(id + " - " + name);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi load categories: " + e.getMessage());
        }
    }
    
    private void loadAllProducts() {
        modelProduct.setRowCount(0);

        String sql = "SELECT id, name, price, quantity, description FROM product";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                modelProduct.addRow(new Object[]{
                    rs.getString("id"),
                    rs.getString("name"),
                    rs.getDouble("price"),
                    rs.getInt("quantity"),
                    rs.getString("description")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi load sản phẩm: " + e.getMessage());
        }
    }
    
    private void loadProductsByCategory(String categoryId) {
        modelProduct.setRowCount(0);

        String sql = "SELECT id, name, price, quantity, description FROM product WHERE category_id = ?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, categoryId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    modelProduct.addRow(new Object[]{
                        rs.getString("id"),
                        rs.getString("name"),
                        rs.getDouble("price"),
                        rs.getInt("quantity"),
                        rs.getString("description")
                    });
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi load sản phẩm theo loại: " + e.getMessage());
        }
    }
    
    private void updateTotal() {
        double totalPrice = 0.0;
        for (int i = 0; i < modelCart.getRowCount(); i++) {
            // robust convert
            Object val = modelCart.getValueAt(i, 4);
            if (val != null) {
                try {
                    totalPrice += Double.parseDouble(String.valueOf(val));
                } catch (NumberFormatException ex) {
                    // bỏ qua dòng lỗi
                }
            }
        }
        lblTotal.setText("Tổng tiền: " + String.format("%,.0f", totalPrice) + " VND");
    }




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        btnAddToCart = new javax.swing.JButton();
        cbCategory = new javax.swing.JComboBox<>();
        btnMinus = new javax.swing.JButton();
        btnPlus = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        lblTotal = new javax.swing.JLabel();
        btnRemoveToCart = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        txtQuantity = new javax.swing.JTextField();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Chào mừng đến với gian hàng của nhóm 7");

        btnAddToCart.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAddToCart.setText("Thêm vào giỏ hàng");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        cbCategory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Danh sách loại sản phẩm" }));
        cbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoryActionPerformed(evt);
            }
        });

        btnMinus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnMinus.setText("-");
        btnMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusActionPerformed(evt);
            }
        });

        btnPlus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnPlus.setText("+");
        btnPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusActionPerformed(evt);
            }
        });

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Đơn giá", "Số lượng", "Thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCart);

        lblTotal.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTotal.setText("Tổng tiền: ");

        btnRemoveToCart.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnRemoveToCart.setText("Xóa khỏi giỏ");
        btnRemoveToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveToCartActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jButton4.setText("Đặt hàng");

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Giá", "Số lượng", "Mã loại", "Miêu tả"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblProduct);

        txtQuantity.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                    .addComponent(btnRemoveToCart)
                                    .addGap(42, 42, 42)
                                    .addComponent(jButton4))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(btnMinus)
                                    .addGap(19, 19, 19)
                                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnPlus)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddToCart))
                                .addComponent(jScrollPane3)
                                .addComponent(jScrollPane1))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jLabel1)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(68, 68, 68)
                .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlus)
                    .addComponent(btnMinus)
                    .addComponent(btnAddToCart)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal)
                    .addComponent(btnRemoveToCart)
                    .addComponent(jButton4))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoryActionPerformed
       Object sel = cbCategory.getSelectedItem();
        if (sel == null) return;

        String selected = sel.toString();
        String categoryId = selected.split(" - ")[0].trim();
        if ("ALL".equalsIgnoreCase(categoryId)) {
            loadAllProducts();
        } else {
            loadProductsByCategory(categoryId);
        }

        // reset quantity về 1 khi đổi loại
        txtQuantity.setText("1");
    }//GEN-LAST:event_cbCategoryActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        int selectedRow = tblProduct.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm!");
            return;
        }

        String id = tblProduct.getValueAt(selectedRow, 0).toString();
        String name = tblProduct.getValueAt(selectedRow, 1).toString();
        double price = Double.parseDouble(tblProduct.getValueAt(selectedRow, 2).toString());
        int stock = Integer.parseInt(tblProduct.getValueAt(selectedRow, 3).toString());

        int quantity;
        try {
            quantity = Integer.parseInt(txtQuantity.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Số lượng không hợp lệ!");
            return;
        }

        if (quantity <= 0) {
            JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        if (quantity > stock) {
            JOptionPane.showMessageDialog(this, "Số lượng vượt quá tồn kho!");
            return;
        }

        double amount = price * quantity;

        DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();
        cartModel.addRow(new Object[]{id, name, price, quantity, amount});
        
        updateTotal();
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusActionPerformed
        try {
        int current = Integer.parseInt(txtQuantity.getText().trim());
            if (current > 1) {
                txtQuantity.setText(String.valueOf(current - 1));
            } // nếu <=1 thì giữ nguyên
        } catch (NumberFormatException ex) {
            txtQuantity.setText("1");
        }
    }//GEN-LAST:event_btnMinusActionPerformed

    private void btnPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusActionPerformed
        try {
            int current = Integer.parseInt(txtQuantity.getText().trim());
            int selectedRow = tblProduct.getSelectedRow();
            if (selectedRow != -1) {
                // giả sử cột tồn kho là cột thứ 4 (index 3)
                int stock = Integer.parseInt(tblProduct.getValueAt(selectedRow, 3).toString());
                if (current < stock) {
                    txtQuantity.setText(String.valueOf(current + 1));
                } else {
                    // không vượt quá tồn kho
                    txtQuantity.setText(String.valueOf(stock));
                    JOptionPane.showMessageDialog(this, "Đã tới giới hạn tồn kho: " + stock);
                }
            } else {
                // nếu chưa chọn sản phẩm, vẫn cho phép tăng (hoặc giữ 1)
                txtQuantity.setText(String.valueOf(current + 1));
            }
        } catch (NumberFormatException ex) {
            txtQuantity.setText("1");
        }
    }//GEN-LAST:event_btnPlusActionPerformed

    private void btnRemoveToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveToCartActionPerformed
         int selectedRow = tblCart.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm trong giỏ để xóa!");
            return;
        }

        DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();
        cartModel.removeRow(selectedRow); // xóa dòng được chọn

        updateTotal(); // gọi hàm cập nhật lại tổng tiền
    }//GEN-LAST:event_btnRemoveToCartActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderUser().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnPlus;
    private javax.swing.JButton btnRemoveToCart;
    private javax.swing.JComboBox<String> cbCategory;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
