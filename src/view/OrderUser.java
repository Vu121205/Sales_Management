package view;

import dao.DBConnection;
import java.sql.Connection;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;



/**
 *
 * @author ADMIN
 */
public class OrderUser extends javax.swing.JFrame {
    private DefaultTableModel modelProduct;
    private DefaultTableModel modelCart;
    private String currentUser;
    // Khai báo biến toàn cục để lưu dòng được chọn trong tblCart
    private int selectedRow = -1;
    /**
     * Creates new form UserForm
     */
    public OrderUser(String username){
        initComponents();
        
        this.currentUser = username;
        
         // khởi tạo model từ table (sau initComponents)
        modelProduct = (DefaultTableModel) tblProduct.getModel();
        modelCart = (DefaultTableModel) tblCart.getModel();

        // Xóa các hàng mặc định do NetBeans tạo để khi addRow sẽ bắt đầu từ dòng 0
        modelCart.setRowCount(0);

        loadCategories();    // đổ combobox
        loadAllProducts();   // mặc định hiển thị tất cả sản phẩm
        txtQuantity.setText("1"); // số lượng mặc định
        lblTotal.setText("Tổng tiền: 0 VND");
        
        updateTotal();
                
    }
    
    private void loadCategories() {
        cbCategory.removeAllItems();
        // thêm lựa chọn xem tất cả
        cbCategory.addItem("Tất cả");

        String sql = "SELECT id, name FROM categories";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                String id = rs.getString("id");
                String name = rs.getString("name");
                cbCategory.addItem(id + " - " + name);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi load categories: " + e.getMessage());
        }
    }
    
    private void loadAllProducts() {
        modelProduct.setRowCount(0);

        String sql = "SELECT id, name, price, quantity, description FROM product";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                modelProduct.addRow(new Object[]{
                    rs.getString("id"),
                    rs.getString("name"),
                    rs.getDouble("price"),
                    rs.getInt("quantity"),
                    rs.getString("description")
                });
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi load sản phẩm: " + e.getMessage());
        }
    }
    
    private void loadProductsByCategory(String categoryId) {
        modelProduct.setRowCount(0);

        String sql = "SELECT id, name, price, quantity, description FROM product WHERE category_id = ?";
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(sql)) {

            ps.setString(1, categoryId);
            try (ResultSet rs = ps.executeQuery()) {
                while (rs.next()) {
                    modelProduct.addRow(new Object[]{
                        rs.getString("id"),
                        rs.getString("name"),
                        rs.getDouble("price"),
                        rs.getInt("quantity"),
                        rs.getString("description")
                    });
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi load sản phẩm theo loại: " + e.getMessage());
        }
    }
    
    private void updateTotal() {
        double totalPrice = 0.0;
        for (int i = 0; i < modelCart.getRowCount(); i++) {
            // robust convert
            Object val = modelCart.getValueAt(i, 4);
            if (val != null) {
                try {
                    totalPrice += Double.parseDouble(String.valueOf(val));
                } catch (NumberFormatException ex) {
                    // bỏ qua dòng lỗi
                }
            }
        }
        lblTotal.setText("Tổng tiền: " + String.format("%,.0f", totalPrice) + " VND");
    }




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        btnAddToCart = new javax.swing.JButton();
        cbCategory = new javax.swing.JComboBox<>();
        btnMinus = new javax.swing.JButton();
        btnPlus = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCart = new javax.swing.JTable();
        lblTotal = new javax.swing.JLabel();
        btnRemoveToCart = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblProduct = new javax.swing.JTable();
        txtQuantity = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taAddress = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        taNote = new javax.swing.JTextArea();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Chào mừng đến với gian hàng của nhóm 7");

        btnAddToCart.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnAddToCart.setText("Thêm vào giỏ hàng");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        cbCategory.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        cbCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Danh sách loại sản phẩm" }));
        cbCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoryActionPerformed(evt);
            }
        });

        btnMinus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnMinus.setText("-");
        btnMinus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMinusActionPerformed(evt);
            }
        });

        btnPlus.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnPlus.setText("+");
        btnPlus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlusActionPerformed(evt);
            }
        });

        tblCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Đơn giá", "Số lượng", "Thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblCart.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblCartMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblCart);

        lblTotal.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTotal.setText("Tổng tiền: ");

        btnRemoveToCart.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnRemoveToCart.setText("Xóa khỏi giỏ");
        btnRemoveToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveToCartActionPerformed(evt);
            }
        });

        btnConfirm.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnConfirm.setText("Đặt hàng");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        tblProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Giá", "Số lượng", "Mã loại", "Miêu tả"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblProduct);

        txtQuantity.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Địa chỉ đơn hàng:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Ghi chú:");

        taAddress.setColumns(20);
        taAddress.setRows(5);
        jScrollPane2.setViewportView(taAddress);

        taNote.setColumns(20);
        taNote.setRows(5);
        jScrollPane4.setViewportView(taNote);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 147, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnMinus)
                                .addGap(18, 18, 18)
                                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnPlus)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAddToCart))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRemoveToCart))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnConfirm)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 253, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(62, 62, 62)))
                .addGap(167, 167, 167))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(39, 39, 39)
                .addComponent(cbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddToCart)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPlus)
                    .addComponent(btnMinus))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal)
                    .addComponent(btnRemoveToCart))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(btnConfirm)
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoryActionPerformed
       Object sel = cbCategory.getSelectedItem();
        if (sel == null) return;

        String selected = sel.toString();
        String categoryId = selected.split(" - ")[0].trim();
        if ("ALL".equalsIgnoreCase(categoryId)) {
            loadAllProducts();
        } else {
            loadProductsByCategory(categoryId);
        }

        // reset quantity về 1 khi đổi loại
        txtQuantity.setText("1");
    }//GEN-LAST:event_cbCategoryActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
                                  
        int selectedRow = tblProduct.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm!");
            return;
        }

        String id = tblProduct.getValueAt(selectedRow, 0).toString();
        String name = tblProduct.getValueAt(selectedRow, 1).toString();
        double price = Double.parseDouble(tblProduct.getValueAt(selectedRow, 2).toString());
        int stock = Integer.parseInt(tblProduct.getValueAt(selectedRow, 3).toString());

        int quantity;
        try {
            quantity = Integer.parseInt(txtQuantity.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Số lượng không hợp lệ!");
            return;
        }

        if (quantity <= 0) {
            JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0!");
            return;
        }

        if (quantity > stock) {
            JOptionPane.showMessageDialog(this, "Số lượng vượt quá tồn kho!");
            return;
        }

        DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();
        boolean found = false;

        // duyệt giỏ hàng để kiểm tra sản phẩm đã có chưa
        for (int i = 0; i < cartModel.getRowCount(); i++) {
            String cartId = cartModel.getValueAt(i, 0).toString();
            if (cartId.equals(id)) {
                int oldQuantity = Integer.parseInt(cartModel.getValueAt(i, 3).toString());
                int newQuantity = oldQuantity + quantity;

                if (newQuantity > stock) {
                    JOptionPane.showMessageDialog(this, "Tổng số lượng vượt quá tồn kho!");
                    return;
                }

                // cập nhật số lượng và thành tiền
                cartModel.setValueAt(newQuantity, i, 3);
                cartModel.setValueAt(price * newQuantity, i, 4);

                found = true;
                break;
            }
        }

        // nếu chưa có trong giỏ thì thêm mới
        if (!found) {
            double amount = price * quantity;
            cartModel.addRow(new Object[]{id, name, price, quantity, amount});
        }

        updateTotal(); // cập nhật tổng tiền
    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnMinusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMinusActionPerformed
        try {
            // Nếu chọn giỏ hàng thì giảm trực tiếp trong giỏ
            int selectedCartRow = tblCart.getSelectedRow();
            if (selectedCartRow != -1) {
                DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();
                int quantity = Integer.parseInt(cartModel.getValueAt(selectedCartRow, 3).toString());
                double price = Double.parseDouble(cartModel.getValueAt(selectedCartRow, 2).toString());

                if (quantity > 1) {
                    quantity--;
                    double amount = price * quantity;
                    cartModel.setValueAt(quantity, selectedCartRow, 3);
                    cartModel.setValueAt(amount, selectedCartRow, 4);
                    txtQuantity.setText(String.valueOf(quantity)); // đồng bộ luôn với txtQuantity
                    updateTotal();
                } else {
                    JOptionPane.showMessageDialog(this, "Số lượng tối thiểu là 1!");
                }
                return;
            }

            // Nếu không chọn giỏ, thì giảm txtQuantity
            int current = Integer.parseInt(txtQuantity.getText().trim());
            if (current > 1) {
                txtQuantity.setText(String.valueOf(current - 1));
            }
        } catch (NumberFormatException ex) {
            txtQuantity.setText("1");
        }
    }//GEN-LAST:event_btnMinusActionPerformed

    private void btnPlusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlusActionPerformed
        try {
            // Ưu tiên: nếu chọn giỏ hàng thì tăng trực tiếp trong giỏ
            int selectedCartRow = tblCart.getSelectedRow();
            if (selectedCartRow != -1) {
                DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();
                int quantity = Integer.parseInt(cartModel.getValueAt(selectedCartRow, 3).toString());
                double price = Double.parseDouble(cartModel.getValueAt(selectedCartRow, 2).toString());

                // kiểm tra tồn kho từ tblProduct nếu cần
                int stock = 9999; // giả định không giới hạn
                for (int i = 0; i < tblProduct.getRowCount(); i++) {
                    if (tblProduct.getValueAt(i, 0).toString().equals(cartModel.getValueAt(selectedCartRow, 0).toString())) {
                        stock = Integer.parseInt(tblProduct.getValueAt(i, 3).toString());
                        break;
                    }
                }

                if (quantity < stock) {
                    quantity++;
                    double amount = price * quantity;
                    cartModel.setValueAt(quantity, selectedCartRow, 3);
                    cartModel.setValueAt(amount, selectedCartRow, 4);
                    txtQuantity.setText(String.valueOf(quantity)); // đồng bộ luôn với txtQuantity
                    updateTotal();
                } else {
                    JOptionPane.showMessageDialog(this, "Đã tới giới hạn tồn kho: " + stock);
                }
                return;
            }

            // Nếu không chọn trong giỏ, thì tăng txtQuantity (đang chọn sản phẩm để thêm)
            int current = Integer.parseInt(txtQuantity.getText().trim());
            int selectedRow = tblProduct.getSelectedRow();
            if (selectedRow != -1) {
                int stock = Integer.parseInt(tblProduct.getValueAt(selectedRow, 3).toString());
                if (current < stock) {
                    txtQuantity.setText(String.valueOf(current + 1));
                } else {
                    txtQuantity.setText(String.valueOf(stock));
                    JOptionPane.showMessageDialog(this, "Đã tới giới hạn tồn kho: " + stock);
                }
            } else {
                txtQuantity.setText(String.valueOf(current + 1));
            }
            
        } catch (NumberFormatException ex) {
            txtQuantity.setText("1");
        }
    }//GEN-LAST:event_btnPlusActionPerformed

    private void btnRemoveToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveToCartActionPerformed
        int selectedRow = tblCart.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn sản phẩm trong giỏ để xóa!");
            return;
        }

        DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();
        cartModel.removeRow(selectedRow); // xóa dòng được chọn

        updateTotal(); // gọi hàm cập nhật lại tổng tiền
        
    }//GEN-LAST:event_btnRemoveToCartActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        this.dispose();
        DefaultTableModel cartModel = (DefaultTableModel) tblCart.getModel();
        if (cartModel.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Giỏ hàng trống!");
            return;
        }

        String orderId = "O" + System.currentTimeMillis(); // hoặc tự sinh mã đơn
        String createdBy = currentUser; // user đang login
        String orderDate = LocalDate.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        String deliveryDate = LocalDate.now().plusDays(1).format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));

        String address = taAddress.getText().trim();
        String note = taNote.getText().trim();

        if (address.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập địa chỉ!");
            return;
        }

        // Mở form xác nhận
        OrderConfirm confirmForm = new OrderConfirm(orderId, createdBy, orderDate, deliveryDate, address, note, cartModel);
        confirmForm.setVisible(true);
    }//GEN-LAST:event_btnConfirmActionPerformed

    private void tblCartMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblCartMouseClicked
        selectedRow = tblCart.getSelectedRow();
        if (selectedRow != -1) {
            String quantity = tblCart.getValueAt(selectedRow, 3).toString(); // cột số lượng
            txtQuantity.setText(quantity); // đồng bộ txtQuantity
        }
    }//GEN-LAST:event_tblCartMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnMinus;
    private javax.swing.JButton btnPlus;
    private javax.swing.JButton btnRemoveToCart;
    private javax.swing.JComboBox<String> cbCategory;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTextArea taAddress;
    private javax.swing.JTextArea taNote;
    private javax.swing.JTable tblCart;
    private javax.swing.JTable tblProduct;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
