package view;

import dao.ProductDAO;
import dao.DBConnection;
import dao.OrderDAO;
import java.awt.Image;
import java.io.File;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.*;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import model.Order;
import model.OrderDetail;

/**
 *
 * @author ADMIN
 */
public class History_Order extends javax.swing.JFrame {
    
    private String username; // biến lưu tài khoản hiện tại
    private OrderDAO orderDAO;
    private ProductDAO productDAO = new ProductDAO();
    /**
     * Creates new form History_Order
     */
    public History_Order(String username) {
        initComponents();
        setLocationRelativeTo(null);//Căn giữa khi mở chương trình
        this.username = username;        
        loadOrders();
    }
    
    // 1. Nạp dữ liệu Order vào bảng orderTable
    private void loadOrders() {
        OrderDAO orderDAO = new OrderDAO();
        List<Order> list = orderDAO.getOrdersByUser(username); // Lọc theo người dùng hiện tại

        DefaultTableModel model = (DefaultTableModel) tblOrders.getModel();
        model.setRowCount(0);

        for (Order o : list) {
            model.addRow(new Object[]{
                o.getId(),             // Mã đơn hàng
                o.getOrderDate(),      // Ngày đặt
                o.getOrderDelivery(),  // Ngày giao
                o.getCreatedBy(),      // Người đặt
                o.getAddress(),        // Địa chỉ
                o.getNote(),           // Ghi chú
                o.getTotalAmount()     // Tổng tiền
            });
        }

        // Xóa chi tiết cũ
        ((DefaultTableModel) tblOrderDetail.getModel()).setRowCount(0);
        }
    
    // Ví dụ trong JFrame hiển thị chi tiết đơn hàng
    private void loadOrderDetails(String orderId) {
        // Lấy model của bảng
        DefaultTableModel model = (DefaultTableModel) tblOrderDetail.getModel();
        model.setRowCount(0); // xóa các hàng cũ

        OrderDAO orderDAO = new OrderDAO();
        List<OrderDetail> details = orderDAO.getOrderDetails(orderId);

        for (OrderDetail od : details) {
            model.addRow(new Object[]{
                od.getOrderDetailId(),  // Mã chi tiết đơn hàng
                od.getOrderId(),        //mã đơn hàng
                od.getProductId(),      // Mã sản phẩm
                od.getPrice(),          // Đơn giá
                od.getQuantity(),       // Số lượng
                od.getAmount()          //  Thành tiền (nếu có)
            });
        }

        // Gán model lại cho JTable
        tblOrderDetail.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnComeback = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOrderDetail = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOrders = new javax.swing.JTable();
        lblImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Lịch sử mua hàng");

        btnComeback.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnComeback.setText("Quay lại");
        btnComeback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComebackActionPerformed(evt);
            }
        });

        tblOrderDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Mã chi tiết", "Mã đơn hàng", "Mã sản phẩm", "Giá", "Số lượng", "Thành tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class, java.lang.Integer.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblOrderDetail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrderDetailMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblOrderDetail);

        tblOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã đơn hàng", "Ngày đặt hàng", "Ngày giao hàng", "Người đặt", "Địa chỉ", "Ghi chú", "Tổng số tiền"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblOrders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblOrdersMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblOrders);

        lblImage.setText("jLabel3");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(btnComeback)
                .addGap(399, 399, 399)
                .addComponent(jLabel1))
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 788, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 232, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1071, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addComponent(btnComeback))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(473, 473, 473)
                        .addComponent(jLabel2)
                        .addContainerGap(87, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnComebackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComebackActionPerformed
        this.dispose();
        OrderUser order = new OrderUser(username);
        order.setVisible(true);
    }//GEN-LAST:event_btnComebackActionPerformed

    private void tblOrdersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrdersMouseClicked
        int row = tblOrders.getSelectedRow();
        if (row != -1) {
            String orderId = tblOrders.getValueAt(row, 0).toString();
            loadOrderDetails(orderId);
        }
    }//GEN-LAST:event_tblOrdersMouseClicked

    private void tblOrderDetailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblOrderDetailMouseClicked
        int selectedRow = tblOrderDetail.getSelectedRow();
        if (selectedRow >= 0) {
            String id = tblOrderDetail.getValueAt(selectedRow, 2).toString();

            // Lấy thông tin sản phẩm từ DB
            String imagePath = productDAO.getImagePathById(id);

            if (imagePath != null && !imagePath.isEmpty()) {
                // Chuyển lại đường dẫn về đúng dạng Windows
                imagePath = imagePath.replace("\\\\", "\\");
                File imageFile = new File(imagePath);

                if (imageFile.exists()) {
                    ImageIcon icon = new ImageIcon(new ImageIcon(imageFile.getAbsolutePath())
                        .getImage().getScaledInstance(lblImage.getWidth(), lblImage.getHeight(), Image.SCALE_SMOOTH));
                    lblImage.setIcon(icon);
                    lblImage.setText("");
                } else {
                    lblImage.setIcon(null);
                    lblImage.setText("Ảnh không tồn tại");
                }
            } else {
                lblImage.setIcon(null);
                lblImage.setText("Chưa có ảnh");
            }
        }
    }//GEN-LAST:event_tblOrderDetailMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComeback;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblImage;
    private javax.swing.JTable tblOrderDetail;
    private javax.swing.JTable tblOrders;
    // End of variables declaration//GEN-END:variables
}
